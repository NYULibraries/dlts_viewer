"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ViewerApp(Y) {
  Y.OpenSeadragon = OpenSeadragon;

  Y.show = function (selector) {
    document.querySelectorAll(selector).forEach(function (elm) {
      elm.style.display = null;
      elm.style.visibility = null;
      elm.hidden = null;
    });
  };

  Y.hide = function (selector) {
    document.querySelectorAll(selector).forEach(function (elm) {
      elm.style.display = 'none';
      elm.style.visibility = 'hidden';
      elm.setAttribute('hidden', true);
    });
  };

  Y.delegate = function (selector, eventType, childSelector, eventHandler) {
    console.log(selector);
    console.log(eventType);
    console.log(childSelector);
    console.log(eventHandler);
    var elements = document.querySelectorAll(selector);

    var _iterator = _createForOfIteratorHelper(elements),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        element = _step.value;
        element.addEventListener(eventType, function (eventOnElement) {
          if (eventOnElement.target.matches(childSelector)) {
            eventHandler(eventOnElement);
          }
        });
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  };

  Y.Viewer = null;
  Y.isFullyLoaded = false;
  Y.nodes = {};

  function on_button_click(e) {
    console.log('on_button_click', e, e.currentTarget);
    e.preventDefault();
    var current_target = e.currentTarget;
    var event_prefix, event_id, node_target, data_target;
    /** don't waste time if the button is inactive */

    if (current_target.classList.contains('inactive')) return;
    /** if current target has target, get target from data-target */

    if (current_target.classList.contains('target')) {
      // data_target = self.getAttribute('data-target');
      // event_prefix = 'button:' + data_target;

      /** look-up for the main target */
      // node_target = Y.all('#' + data_target);
      console.log('@TODO: Has target');
    }
    /** current target is the main target */
    else {
      event_id = current_target.id;
      event_prefix = 'button:' + event_id;
      /** find possible reference targets to this target */
      // node_target = Y.all('a[data-target=' + event_id + ']');

      console.log('@TODO: Find all targets');
    }

    if (current_target.classList.contains('on')) {
      current_target.classList.remove('on');
      current_target.classList.add('off');
      console.log('@TODO: Remove all class'); // if (Y.Lang.isObject(node_target)) {
      //   node_target.each((node) => {
      //     node.removeClass('on');
      //   });
      // }

      console.log("".concat(event_prefix, ":off"));
      document.dispatchEvent(new CustomEvent("".concat(event_prefix, ":off"), e));
    } else {
      current_target.classList.add('on');
      current_target.classList.remove('off'); // if (Y.Lang.isObject(node_target)) {
      //   node_target.each((node) => {
      //     node.addClass('on');
      //   });
      // }

      console.log("".concat(event_prefix, ":on"));
      document.dispatchEvent(new CustomEvent("".concat(event_prefix, ":on"), e));
    }

    console.log("".concat(event_prefix, ":toggle"));
    document.dispatchEvent(new CustomEvent("".concat(event_prefix, ":toggle"), e));
  }

  function pjax_callback(e) {
    var currentTarget = e.currentTarget;
    e.preventDefault();
    /** test if the target is not active */

    if (currentTarget.classList.contains('inactive')) return false;

    try {
      document.getElementsByTagName('body')[0].classList.add('openlayers-loading');
      document.dispatchEvent(new CustomEvent('sequence:available', {
        detail: {
          operation: e.currentTarget.dataset.operation
        }
      }));
    } catch (e) {
      console.log(e);
    }
  }

  function fullscreenOn() {
    var docElm = document.documentElement;
    var top = document.querySelector('.top');
    var button = document.querySelector('#button-metadata');

    if (button) {
      button.classList.remove('on');
    }

    if (docElm.requestFullscreen) {
      docElm.requestFullscreen();
    } else if (docElm.msRequestFullscreen) {
      docElm.msRequestFullscreen();
    } else if (docElm.mozRequestFullScreen) {
      docElm.mozRequestFullScreen();
    } else if (docElm.webkitRequestFullScreen) {
      docElm.webkitRequestFullScreen();
    }

    if (top) {
      button.classList.add('hidden');
    } // Y.CrossFrame.postMessage('parent', JSON.stringify({fire: 'button:button-fullscreen:on'}));

  }

  function fullscreenOff() {
    var fullscreenButton = document.querySelector('a.fullscreen');
    var top = document.querySelector('.top');

    if (document.exitFullscreen) {
      document.exitFullscreen();
    } else if (document.msExitFullscreen) {
      document.msExitFullscreen();
    } else if (document.mozCancelFullScreen) {
      document.mozCancelFullScreen();
    } else if (document.webkitCancelFullScreen) {
      document.webkitCancelFullScreen();
    }

    console.log('click fullscreenOff: @todo blur()'); // figure out how to do this without YUI3

    if (fullscreenButton) {
      // fullscreenButton.blur();
      console.log(fullscreenButton);
    }

    if (top) {
      top.classList.remove('hidden');
    } // Y.CrossFrame.postMessage('parent', JSON.stringify({fire: 'button:button-fullscreen:off'}));

  }

  function change_page(e) {
    console.log('change_page');

    try {
      var operation = e.detail.operation;
      Y.isFullyLoaded = true;
      var osd = Y.nodes.osd;
      var _osd$dataset = osd.dataset,
          type = _osd$dataset.type,
          identifier = _osd$dataset.identifier,
          service = _osd$dataset.service;
      var sequence = parseInt(osd.dataset.sequence, 10);
      var sequenceCount = parseInt(osd.dataset.sequenceCount, 10);
      var items = [];

      if (operation == 'decrease') {
        sequence = sequence - 1;

        if (sequence < 1) {
          sequence = 1;
        }

        items[0] = sequence;
        console.log('decrease', sequence);
      }

      if (operation == 'increase') {
        sequence = sequence + 1;

        if (sequence > sequenceCount) {
          sequence = sequenceCount;
        }

        if (osd.dataset.view == 'single') {
          items[0] = sequence;
        } else {
          if (sequence % 2 === 1) {
            items[0] = sequence;
            items[1] = sequence + 1;
          } else {
            items[0] = sequence - 1;
            items[1] = sequence;
          }
        }
      }

      if (operation == 'toggleview') {
        if (osd.dataset.view == 'single') {
          osd.dataset.view = 'doublepage';

          if (sequence % 2 === 1) {
            items[0] = sequence;
            items[1] = sequence + 1;
          } else {
            items[0] = sequence - 1;
            items[1] = sequence;
          }
        } else {
          osd.dataset.view = 'single';
          items[0] = sequence;
        }
      }

      if (operation == 'change') {
        items[0] = sequence;
      }

      osd.dataset.sequence = items[0]; // this.one('.current_page').set('text', to_page);
      // this.addClass('loading').show();

      var tileSources = items.map(function (sequence, x) {
        return {
          tileSource: "".concat(service, "/").concat(type, "/").concat(identifier, "/").concat(sequence, "/info.json"),
          x: x
        };
      });
      document.querySelectorAll('.paging.next').forEach(function (item) {
        if (sequence >= sequenceCount) {
          item.classList.add('inactive');
        } else {
          if (item.classList.contains('inactive')) {
            item.classList.remove('inactive');
          }
        }
      });
      document.querySelectorAll('.paging.previous').forEach(function (item) {
        if (sequence <= 1) {
          item.classList.add('inactive');
        } else {
          if (item.classList.contains('inactive')) {
            item.classList.remove('inactive');
          }
        }
      });
      window.history.pushState({}, 'some title', items[0].toString());
      Y.Viewer.open(tileSources); // Let parent know that Viewer is going to paint.
      // Y.CrossFrame.postMessage('parent', JSON.stringify({fire: 'viewer:change', data: config }));
    } catch (e) {
      console.log(e);
    }
  }

  function onButtonMetadataOn() {
    var button = document.querySelector('#button-metadata');
    var element = document.querySelector('#pagemeta');
    element.classList.remove('hidden');
    button.classList.remove('off');
    button.classList.add('on');
    element.closest('.pane-body').classList.remove('pagemeta-hidden'); // Y.CrossFrame.postMessage('parent', JSON.stringify({
    //   fire: 'button:button-metadata:on'
    // }));
  }

  function onButtonMetadataOff() {
    var button = document.querySelector('#button-metadata');
    var element = document.querySelector('#pagemeta');
    button.classList.remove('on');
    button.classList.add('off');
    element.classList.add('hidden');
    element.closest('.pane-body').classList.add('pagemeta-hidden'); // Y.CrossFrame.postMessage("parent", JSON.stringify({fire: 'button:button-metadata:off'}));
  }

  function tilesLoading() {
    var body = Y.nodes.body;

    if (body.classList.contains('openlayers-loading')) {
      setTimeout(function () {
        tilesLoading();
      }, 100);
    } else {
      Y.hide('.pane.load');
      body.classList.remove('openlayers-loading');
    }
  }

  function onPjaxLoadAvailable(conf) {
    console.log('onPjaxLoadAvailable', conf); //   var page_title = Y.one('#page-title') ;
    //   var sequence = conf.sequence;
    //   var thumbnails = false;
    //   var currentPage = false;
    //   var node = false;
    //   if (page_title) {
    //     page_title.set('text', conf.title);
    //   }
    //   slider.triggerBy = 'pjax:load:available';
    //   slider.set('value', parseInt(sequence, 10));
    //   Y.one('#slider_value').set('value', sequence);
    //   var thumbnails = Y.one('.view-book-thumbnails');
    //   if (thumbnails) {
    //     currentPage = thumbnails.one('.current-page');
    //     if (currentPage) {
    //       currentPage.removeClass('current-page');
    //     }
    //     node = thumbnails.one('[data-sequence="'+ sequence +'"]');
    //     if (node) {
    //       node.addClass('current-page');
    //     }
    //   }
  } // function onSelectMVChange(e) {
  //   e.halt();
  //   const currentTarget = e.currentTarget;
  //   const value = currentTarget.one(':checked').get('value');
  //   const lang = Y.one('.node-dlts-book').getAttribute('data-lang');
  //   const url = value.substring(value.indexOf('::') + 2, value.length) + '/1?lang=' + lang;
  //   const data = { url : url };
  //   if (window.self === window.top) {
  //     window.location.assign(url)
  //   }
  //   else {
  //     Y.CrossFrame.postMessage('parent', JSON.stringify({ fire: 'change:option:multivolume', data }));
  //   }
  // }
  // Y.one('.pane.pager').delegate('submit', pager_form, 'form', slider_datasource);  
  // https://javascript.info/event-delegation
  // Y.delegate('change', onSelectMVChange, 'body', '.field-name-mv-2016 form');


  function updateLoadingIndicator() {
    if (Y.isFullyLoaded) {
      Y.nodes.body.classList.remove('openlayers-loading'); // Y.one('.pane.load').hide();
      // Y.CrossFrame.postMessage('parent', JSON.stringify({fire: 'viewer:isFullyLoaded', data: {} }));
    }
  }

  function addItemHandler(event) {
    var tiledImage = event.item;
    tiledImage.addHandler('fully-loaded-change', function () {
      var newFullyLoaded = areAllFullyLoaded();

      if (newFullyLoaded !== Y.isFullyLoaded) {
        Y.isFullyLoaded = newFullyLoaded;
        updateLoadingIndicator();
      }
    });
  }

  function areAllFullyLoaded() {
    var count = Y.Viewer.world.getItemCount();

    for (var i = 0; i < count; i++) {
      var tiledImage = Y.Viewer.world.getItemAt(i);

      if (!tiledImage.getFullyLoaded()) {
        return false;
      }
    }

    return true;
  }

  function onHideThumbnailsView() {
    var osd = Y.nodes.osd;
    Y.show("#".concat(osd.id));
    Y.show('#pager');
    Y.nodes.html.style.overflow = 'initial';
    Y.hide('#thumbnails');
  }

  function onOpenThumbnailsView() {
    var osd = Y.nodes.osd;
    var uri = osd.dataset.uri;
    var width = '230';
    var height = '150';
    Y.hide("#".concat(osd.id));
    Y.hide('#pager');
    Y.nodes.html.style.overflow = 'initial';
    Y.show('#thumbnails');
    axios.get("".concat(uri, "/thumbnails?pjax=true&width=").concat(width, "&height=").concat(height)).then(function (response) {
      if (response.status === 200) {
        var parser = new DOMParser();
        var doc = parser.parseFromString(response.data, 'text/html');
        Y.nodes.thumbnails.appendChild(doc.querySelector('.thumbnails.container'));
      }
    })["catch"](function (error) {
      console.log(error);
    });
  }

  function onThumbnailsClick(event) {
    event.preventDefault();
    var current_target = event.currentTarget;
    Y.nodes.osd.dataset.sequence = current_target.dataset.sequence;
    Y.nodes.html.style.overflow = 'hidden';
    show('#openseadragon1');
    show('#pager');
    show('#pagemeta');
    hide('#thumbnails');
    document.dispatchEvent(new CustomEvent('sequence:available', {
      detail: {
        operation: 'change'
      }
    }));
  }

  window.addEventListener('load', function () {
    Y.nodes.html = document.querySelector('html');
    Y.nodes.body = document.querySelector('body');
    Y.nodes.thumbnails = document.querySelector('#thumbnails');
    Y.nodes.buttonMetadata = document.querySelector('#button-metadata');
    Y.nodes.pagemeta = document.querySelector('#pagemeta');
    Y.nodes.osd = document.querySelector('#openseadragon1');
    Y.nodes.display = document.getElementById('#display');
    Y.nodes.togglePage = document.getElementById('toggle-page');
    Y.nodes.controlZoomOut = document.getElementById('control-zoom-out');
    Y.nodes.controlZoomIn = document.getElementById('control-zoom-in');
    Y.nodes.toggleLanguage = document.querySelector('body .language');
    document.dispatchEvent(new CustomEvent('viewer:contentready'));
    var tileSources = Y.nodes.osd.dataset.manifest.split(',').map(function (manifest, x) {
      return {
        tileSource: manifest,
        x: x
      };
    });
    Y.Viewer = Y.OpenSeadragon({
      id: Y.nodes.osd.id,
      preserveViewport: true,
      showNavigationControl: false,
      showZoomControl: false,
      showHomeControl: false,
      showFullPageControl: false,
      visibilityRatio: 1,
      minZoomLevel: 0,
      defaultZoomLevel: 0,
      sequenceMode: false,
      tileSources: tileSources
    });
    Y.Viewer.world.addHandler('add-item', addItemHandler);

    Y.nodes.controlZoomIn.onclick = function () {
      var actualZoom = Y.Viewer.viewport.getZoom();
      var maxZoom = Y.Viewer.viewport.getMaxZoom();

      if (actualZoom < maxZoom) {
        Y.Viewer.viewport.zoomTo(actualZoom * 2);
      }
    }; // Zoom out event.


    Y.nodes.controlZoomOut.onclick = function () {
      var actualZoom = Y.Viewer.viewport.getZoom();
      var minZoom = Y.Viewer.viewport.getMinZoom();
      var zoom = actualZoom / 2;

      if (zoom >= minZoom) {
        Y.Viewer.viewport.zoomTo(zoom);
      } else {
        if (actualZoom > minZoom) {
          Y.Viewer.viewport.zoomTo(minZoom);
        }
      }
    };

    Y.nodes.togglePage.onclick = function (e) {
      e.preventDefault();
      document.dispatchEvent(new CustomEvent('sequence:available', {
        detail: {
          operation: e.currentTarget.dataset.operation
        }
      }));
    };

    window.addEventListener('resize', function () {// slider.set('length' ,(Y.one('#pager').get('offsetWidth') - 120 ));
    });
    document.querySelectorAll('a.paging').forEach(function (item) {
      item.addEventListener('click', pjax_callback, false);
    });
    document.querySelectorAll('a.button').forEach(function (item) {
      item.addEventListener('click', on_button_click, false);
    });
    document.addEventListener('sequence:available', change_page, false);
    document.addEventListener('button:button-metadata:on', onButtonMetadataOn, false);
    document.addEventListener('button:button-metadata:off', onButtonMetadataOff, false);
    document.addEventListener('button:button-fullscreen:on', fullscreenOn, false);
    document.addEventListener('button:button-fullscreen:off', fullscreenOff, false);
    document.addEventListener('pjax:load:available', onPjaxLoadAvailable, false);
    document.addEventListener('viewer:contentready', tilesLoading, false);
    document.addEventListener('button:button-thumbnails:on', onOpenThumbnailsView, false);
    document.addEventListener('button:button-thumbnails:off', onHideThumbnailsView, false);
    Y.delegate('#thumbnails', 'click', 'a', function (event) {
      event.preventDefault();
      var current_target = event.target;
      console.log(current_target);
    });
    Y.delegate('body', 'change', 'select', function (event) {
      var current_target = event.target;
      axios.get(current_target.value).then(function (response) {
        if (response.status === 200) {
          var parser = new DOMParser();
          var doc = parser.parseFromString(response.data, 'text/html');
          var pane = document.querySelector('.view-mode-metadata');
          var pagemeta = doc.querySelector('.view-mode-metadata');
          var main = document.querySelector('.pane.main');
          var html = document.querySelector('html');
          html.dir = pagemeta.dataset.dir;
          main.dir = pagemeta.dataset.dir;
          pane.dir = pagemeta.dataset.dir;
          pane.innerHTML = pagemeta.innerHTML; // document.title = node.one('.field-name-title h2').get('innerText');
          // if (titlebar) {
          //   titlebar.set('dir', dir);
          // }
          // if (pagetitle) {
          //   pagetitle.set('innerHTML', document.title);
          // }
        }
      })["catch"](function (error) {
        console.log(error);
      });
    }); // Y.CrossFrame.postMessage('parent', JSON.stringify({ fire: 'display:load', data: { osd: osd.dataset} }));
  });
}

ViewerApp({});
<?php

/**
 * @file
 * DLTS Viewer module.
 */

/**
 * Load MongoDB helper.
 */
include_once 'inc/common.inc';

/**
 * Include helpers and others.
 */
include_once 'inc/utils.inc';

/**
 * Load MongoDB helper.
 */
include_once 'inc/mongodb.inc';

/**
 * Include wildcard loaders.
 */
include_once 'inc/loaders.inc';

/**
 * Include hook_menu and all the module routes.
 */
include_once 'inc/routes.inc';

/**
 * Include types.
 */
include_once 'inc/types.inc';

/**
 * Include Views hooks and Views helpers.
 */
include_once 'inc/views.inc';

/**
 * Include datasource helpers.
 */
include_once 'inc/datasource.inc';

/**
 * Include theme functions and hook_theme.
 */
include_once 'inc/themes.inc';

/**
 * Include shutdown functions.
 */
include_once 'inc/shutdown.inc';

/**
 * Implementation of hook_init().
 */
function dlts_viewer_init() {
  drupal_add_http_header('Access-Control-Allow-Origin', '*');
  drupal_add_http_header('Permissions-Policy', 'interest-cohort=()');
}

/**
 * Implementation of hook_theme().
 * https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_theme/7
 */
function dlts_viewer_custom_theme() {
  if (dlts_viewer_is_resource()) {
    return 'tao';
  }
  if (current_path() == 'api/v1') {
    return 'tao';
  }
  return 'rubik';
}

/**
 * Implements hook_permission().
 */
function dlts_viewer_permission() {
  return [
    'access dlts repository' => [
      'title' => t('Query repository'),
      'description' => t('Query repository and search objects.'),
    ],
    'administer fileserver' => [
      'title' => t('administer fileserver'),
      'description' => t('Administer the settings for the fileServer.'),
    ],
    'dlts create object' => [
      'title' => t('Use DLTS Viewer API to create object'),
      'description' => t('Allow user to create object using DLTS Viewer API.'),
    ],
    'dlts topic api' => [
      'title' => t('Allow user to see Topic API'),
      'description' => t('Allow user to see Topic API'),
    ],
    'access iiif content' => [
      'title' => t('Allow user to IIIF content'),
      'description' => t('Allow user to IIIF content'),
    ],
    'administer viewer' => [
      'title' => t('Allow user to administer Viewer'),
      'description' => t('Allow user to administer Viewer'),
    ],
  ];
}

/**
 * Implements hook_entity_info_alter().
 * https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_entity_info_alter/7
 */
function dlts_viewer_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['metadata'] = [
    'label' => t('Metadata List'),
    'custom settings' => TRUE,
  ];
}

/**
 * Implements template_preprocess_html
 * https://api.drupal.org/api/drupal/includes%21theme.inc/function/template_preprocess_html/7
 */
function dlts_viewer_preprocess_html(&$vars) {
  if (isset($vars['head_title_array']['title'])) {
    $vars['head_title'] = $vars['head_title_array']['title'];
  }
  /**
   * The X-Frame-Options HTTP response header can be used to indicate whether or not a
   * browser should be allowed to render a page in a <frame>, <iframe> or <object> .
   * Sites can use this to avoid clickjacking attacks, by ensuring that their content is
   * not embedded into other sites.
   *
   * The added security is only provided if the user accessing the document is using a
   * browser supporting X-Frame-Options.
   *
   * As of Drupal 7.50, Drupal core sets X-Frame-Options by default to prevent the site
   * from being embedded in an iframe on another domain. We want our sites to be
   * embedded; we need to remove this header.
   *
   * See: https://www.drupal.org/node/2735873
   * See: https://www.owasp.org/index.php/Clickjacking
   * See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
   *
   */
  header_remove('X-Frame-Options');
  // check if we are in an admin page
  if (dlts_viewer_is_resource()) {
    // see html.tpl.php
    $vars['pane_metadata_hidden'] = '';
    /** The Viewer sets language direction in the markup */
    $vars['language_dir'] = dlts_viewer_viewer_language($vars);
    /** we are not in admin page, default Viewer HTML template */
    $vars['theme_hook_suggestions'][] = 'html__viewer';
    /** Check for  mobile */
    if (dlts_viewer_is_mobile()) {
      $vars['classes_array'][] = 'is_mobile';
      // hide information panel for mobile
      // see https://jira.nyu.edu/jira/browse/DLTSVIEWER-70
      $vars['pane_metadata_hidden'] = 'pagemeta-hidden';
    }
    else {
      $vars['classes_array'][] = 'not_mobile';
    }
    // See: https://jira.nyu.edu/jira/browse/DLTSVIEWER-81
    $language_default = language_default();
    $vars['resource_language_code'] = $language_default->language;
    // We have access to $resource_language_code in the global context
    // if the resource exist.
    // See: dlts_viewer_book_dispatcher()
    $resource_language_code = dlts_viewer_resource_language_code();
    if ($resource_language_code) {
      $vars['resource_language_code'] = $resource_language_code;
    }
    /**
     * We use Drupal to render objects from MongoDB that don't have a record register
     * in Drupal's database. We don't want Drupal to manage this records. We need a
     * way to "HOOK" in different stages when the objects it's being render. In this
     * case we want to allowed changes to hook_preprocess_html
     */
    $call_suggestion = array_shift($vars['theme_hook_suggestions']);
    if ($call_suggestion) {
      $call_suggestion = str_replace('html__', '', $call_suggestion);
      $function_to_call = __FUNCTION__ . '_' . $call_suggestion;
      if (function_exists($function_to_call)) {
        $function_to_call($vars);
      }
    }
  }
}

/**
 * Implements hook_process_HOOK
 * https://api.drupal.org/api/drupal/modules%21system%21theme.api.php/function/hook_process_HOOK/7.x
 */
function dlts_viewer_process_node(&$vars) {
  $function_to_call = __FUNCTION__ . '_' . $vars['node']->type;
  /** Call hook_process_node_TYPE if exist */
  if (function_exists($function_to_call)) {
    $function_to_call($vars);
  }
}

/**
 * Implements template_preprocess_node().
 * https://api.drupal.org/api/drupal/modules%21node%21node.module/function/template_preprocess_node/7
 */
function dlts_viewer_preprocess_node(&$vars) {
  $function_to_call = __FUNCTION__ . '_' . $vars['node']->type;
  /** Call hook_process_node_TYPE if exist */
  if (function_exists($function_to_call)) {
    $function_to_call($vars);
  }
}

/**
 * Implements template_preprocess_page
 * https://api.drupal.org/api/drupal/includes%21theme.inc/function/template_preprocess_page/7
 */
function dlts_viewer_preprocess_page(&$vars) {
  if (dlts_viewer_is_resource()) {
    $vars['language_dir'] = dlts_viewer_viewer_language($vars);
  }
}

/**
 * Implements template_process_page().
 * https://api.drupal.org/api/drupal/includes%21theme.inc/function/template_process_page/7
 */
function dlts_viewer_process_page(&$vars) {
  if (dlts_viewer_is_resource()) {
    $is_embed = dlts_viewer_is_embed();
    $vars['theme_hook_suggestions'][] = 'page__viewer';
    $vars['language_dir'] = dlts_viewer_viewer_language($vars);
    $vars['is_embed'] = $is_embed;
    // check if this is a embed request. Don't show title if is embeded
    if (!$is_embed) {
      $top_options = [
        'is_admin' => $vars['is_admin'],
        'tabs' => render($vars['tabs']),
        'messages' => $vars['messages'],
        'title' => $vars['title'],
        'action_links' => render($vars['action_links']),
        'title_prefix' => render($vars['title_prefix']),
        'title_suffix' => render($vars['title_suffix']),
        'help' => render($vars['page']['help']),
      ];
      $vars['top'] = theme('dlts_viewer_top', $top_options);
    }
  }
}

/**
 * Implements hook_stream_wrappers().
 *
 * hook_stream_wrappers() is Drupal's way of exposing the class that PHP will
 * use to provide a new stream wrapper class. In this case, we'll expose the
 * 'fileserver' scheme, e.g., "fileserver://example/example.txt"
 *
 * @see FileFilesServerStreamWrapper
 */
function dlts_viewer_stream_wrappers() {
  return [
    'fileserver' => [
      'name' => t('Fileserver StreamWrapper'),
      'class' => 'FileFilesServerStreamWrapper',
      'description' => t('Access file from the FileServer.'),
      'type' => STREAM_WRAPPERS_WRITE_VISIBLE,
    ],
    'pdfserver' => [
      'name' => t('PDFServer StreamWrapper'),
      'class' => 'PDFServerStreamWrapper',
      'description' => t('Access PDF file from the PDFServer.'),
      'type' => STREAM_WRAPPERS_WRITE_VISIBLE,
    ],
  ];
}

function dlts_viewer_metadata_display($node) {
	return node_view($node, 'metadata', $node->language);
}

/**
 * Implements hook_flush_caches().
 *
 * Using this as a way to get certain phrases into the t() workflow, that don't
 * seem to otherwise make it. To get these items to show up in the Translate
 * interface, go to a different language and in the Drupal admin clear the
 * Drupal cache. (ie, at /admin/config/development/performance
 */
function dlts_viewer_flush_caches() {
	// Translatables
	// Included for use with string extractors like potx.

  // https://docs.google.com/spreadsheets/d/1LIwBMDOtuuaPqjx70CbqvygWF8MUVRmM7-gB1plE9kM/edit#gid=0

  t('Author');

  t('High-resolution');

  t('Low-resolution');

  t('High resolution');

  t('Low resolution');

  t('High-resolution PDF');

  t('Low-resolution PDF');

  t('Vol.');

  t('Download');

  t('Author/Contributor');

  t('Binding Orientation');

  t('Call Number');
  // رقم الاستدعاء

  t('Collection');

  t('Contributor');

  t('Creator');

  t('Description');

  t('Dimensions');

  t('Editor');

  t('Geographic Coordinates');

  t('Geographic Subject');

  t('Permanent Link');

  t('Identifier');

  t('ISBN');

  t('Language');

  t('Language Code');

  t('Number');

  t('OCR Text');

  t('Other Version');

  t('Page Count');

  t('Provider');

  t('PDF');

  t('Date of Publication');

  t('Place of Publication');

  t('Publisher');

  t('Read Order');

  t('Representative Image');

  t('Rights');

  t('Scan Date');

  t('Scan Order');

  t('Scanning Notes');

  t('Sequence Count');

  t('Subject');

  t('Subtitle');

  t('Title');

  t('Topic');

  t('Volume');

  t('Arabic collections online');
  // المجموعات العربية على الانترنت

  t('New York University Libraries');
  // مكتبات جامعة نيويورك

  t('Princeton University Libraries');
  // مكتبات جامعة برينستون

  t('Cornell University Libraries');
  // مكتبات جامعة كورنيل

  t('Columbia University Libraries');
  // مكتبات جامعة كولومبيا

  t('American University of Beirut');
  // الجامعة الاميركية في بيروت

  t('American University in Cairo');
  // الجامعة الاميركية بالقاهرة

  t('United Arab Emirates National Archives');
  // الامارات العربية المتحدة - الارشيف الوطني

}

function dlts_viewer_js_alter(&$javascript) {
  if (dlts_viewer_is_resource()) {
    $allow = [
      'https://cdnjs.cloudflare.com/ajax/libs/openseadragon/3.1.0/openseadragon.min.js',
      'https://cdnjs.cloudflare.com/ajax/libs/axios/1.2.1/axios.min.js',
      'https://cdnjs.cloudflare.com/ajax/libs/keyboardjs/2.6.2/keyboard.min.js',
      'sites/all/modules/dlts_viewer/dist/polyfill.bundle.js',
      'sites/all/modules/dlts_viewer/dist/books.bundle.js',
    ];
    foreach ($javascript as $key => $setting) {
      if ((array_search($key, $allow)) === false) {
        unset($javascript[$key]);
      }
    }
  }
}

function dlts_viewer_css_alter(&$css) {
  if (dlts_viewer_is_resource()) {
    $allow = [
      'sites/all/modules/dlts_viewer/dist/viewer.css',
    ];
    foreach ($css as $key => $setting) {
      if ((array_search($key, $allow)) === false) {
        unset($css[$key]);
      }
    }
  }
}

// Here we need to make sure we delete the record from Apache Solr
function dlts_viewer_node_delete($node) {
  db_delete('dlts_viewer_resource')->condition('nid', $node->nid)->execute();
}

/**
 * Create the table which was missing during early stage of module development.
 */
function dlts_viewer_update_7102() {
  $table = [
    'description' => 'Resource table',
    'fields' => [
      'nid' => [ 'type' => 'varchar', 'length' => 255, 'not null' => FALSE ],
      'noid' => [ 'type' => 'varchar', 'length' => 255, 'not null' => FALSE ],
      'identifier' => [ 'type' => 'varchar', 'length' => 255, 'not null' => FALSE ],
      'document' => [ 'type' => 'text' ],
      'proceed' => [ 'type' => 'int', 'not null' => TRUE, 'default' => 0 ],
    ]
  ];
  db_create_table('dlts_viewer_resource', $table);
}

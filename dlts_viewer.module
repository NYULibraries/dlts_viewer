<?php

// https://api.drupal.org/api/examples/batch_example!batch_example.module/7

/**
 * @file
 * DLTS Viewer module
 */

/**
 * Load MongoDB helper
 */
include_once 'inc/mongodb.inc';

/**
 * Include wildcard loaders
 */
include_once 'inc/loaders.inc';

/**
 * Include hook_menu and all the module routes
 */
include_once 'inc/routes.inc';

/**
 * Include types
 */
include_once 'inc/types.inc';

/**
 * Include Views hooks and Views helpers (all things Views (module))
 */
include_once 'inc/views.inc';

/**
 * Include datasource helpers
 */
include_once 'inc/datasource.inc';

/**
 * Include helpers and others
 */
include_once 'inc/utils.inc';

/**
 * Include theme functions and hook_theme
 */
include_once 'inc/themes.inc';


function dlts_viewer_init() {
  drupal_add_http_header('Access-Control-Allow-Origin', '*');
}

/**
 * Implementation of hook_theme().
 * https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_theme/7
 */
function dlts_viewer_custom_theme() {
  if (dlts_viewer_is_resource()) {
    return 'tao';
  }
}

/**
 * Implements hook_menu().
 * https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_menu/7
 */

/**
 * Implements hook_permission().
 */
function dlts_viewer_permission() {
  return array(
    'administer fileserver' => array(
      'title' => t('administer fileserver'),
      'description' => t('Administer the settings for the fileServer.'),
    ),
  );
}

/**
 * Implements hook_entity_info_alter().
 * https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_entity_info_alter/7
 */
function dlts_viewer_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['metadata'] = array(
    'label' => t('Metadata List'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements template_preprocess_html
 * https://api.drupal.org/api/drupal/includes%21theme.inc/function/template_preprocess_html/7
 */
function dlts_viewer_preprocess_html(&$vars) {
  /**
   * The X-Frame-Options HTTP response header can be used to indicate whether or not a
   * browser should be allowed to render a page in a <frame>, <iframe> or <object> .
   * Sites can use this to avoid clickjacking attacks, by ensuring that their content is
   * not embedded into other sites.
   *
   * The added security is only provided if the user accessing the document is using a
   * browser supporting X-Frame-Options.
   *
   * As of Drupal 7.50, Drupal core sets X-Frame-Options by default to prevent the site
   * from being embedded in an iframe on another domain. We want our sites to be
   * embedded; we need to remove this header.
   *
   * See: https://www.drupal.org/node/2735873
   * See: https://www.owasp.org/index.php/Clickjacking
   * See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
   *
   */
  header_remove('X-Frame-Options');
  // check if we are in an admin page
  if (dlts_viewer_is_resource()) {
    // see html.tpl.php
    $vars['pane_metadata_hidden'] = '';
    /** The Viewer sets language direction in the markup */
    $vars['language_dir'] = dlts_viewer_viewer_language($vars);    
    /** we are not in admin page, default Viewer HTML template */
    $vars['theme_hook_suggestions'][] = 'html__viewer';
    $vars['classes_array'][] = 'yui3-skin-sam';
    /** Check if this is a PJAX request */
    if (dlts_viewer_is_pjax()) {
      /** default Viewer PJAX HTML template */
      $vars['theme_hook_suggestions'][] = 'html__viewer_pjax';
    }
    /** Check for  mobile */
    if (dlts_viewer_is_mobile()) {
      $vars['classes_array'][] = 'is_mobile';
      // hide information panel for mobile
      // see https://jira.nyu.edu/jira/browse/DLTSVIEWER-70
      $vars['pane_metadata_hidden'] = 'pagemeta-hidden';
    }
    else {
      $vars['classes_array'][] = 'not_mobile';      
    }
    
    /**
     * We use Drupal to render objects from MongoDB that don't have a record register
     * in Drupal's database. We don't want Drupal to manage this records. We need a
     * way to "HOOK" in different stages when the objects it's being render. In this
     * case we want to allowed changes to hook_preprocess_html
     */
    $call_suggestion = array_shift($vars['theme_hook_suggestions']);
    if ($call_suggestion) {
      $call_suggestion = str_replace('html__', '', $call_suggestion);
      $function_to_call = __FUNCTION__ . '_' . $call_suggestion;
      if (function_exists($function_to_call)) {
        $function_to_call($vars);
      }
    }
  }
}

/**
 * Implements hook_process_HOOK
 * https://api.drupal.org/api/drupal/modules%21system%21theme.api.php/function/hook_process_HOOK/7.x
 */
function dlts_viewer_process_node(&$vars) {
  $function_to_call = __FUNCTION__ . '_' . $vars['node']->type;
  /** Call hook_process_node_TYPE if exist */
  if (function_exists($function_to_call)) {
    $function_to_call($vars);
  }
}

/**
 * Implements template_preprocess_node().
 * https://api.drupal.org/api/drupal/modules%21node%21node.module/function/template_preprocess_node/7
 */
function dlts_viewer_preprocess_node(&$vars) {
  $function_to_call = __FUNCTION__ . '_' . $vars['node']->type;
  /** Call hook_process_node_TYPE if exist */
  if (function_exists($function_to_call)) {
    $function_to_call($vars);
  }
}

/**
 * Implements template_preprocess_page
 * https://api.drupal.org/api/drupal/includes%21theme.inc/function/template_preprocess_page/7
 */
function dlts_viewer_preprocess_page(&$vars) {
  if (dlts_viewer_is_resource()) {
    $vars['language_dir'] = dlts_viewer_viewer_language($vars);
    if (dlts_viewer_is_pjax()) {
      $vars['theme_hook_suggestions'][] = 'page__books_pjax';
    }
  }
}

/**
 * Implements template_process_page().
 * https://api.drupal.org/api/drupal/includes%21theme.inc/function/template_process_page/7
 */
function dlts_viewer_process_page(&$vars) {
  if (dlts_viewer_is_resource()) {
    $is_embed = dlts_viewer_is_embed();
    $is_pjax = dlts_viewer_is_pjax();
    $vars['theme_hook_suggestions'][] = 'page__viewer';
    $vars['language_dir'] = dlts_viewer_viewer_language($vars);
    $vars['is_embed'] = $is_embed;
    if ($is_pjax) {
      $vars['theme_hook_suggestions'][] = 'page__viewer_pjax';
    }
    // check if this is a embed request. Don't show title if is embeded
    if (!$is_embed) {
      $top_options = array(
        'is_admin' => $vars['is_admin'],
        'tabs' => render($vars['tabs']),
        'messages' => $vars['messages'],
        'title' => $vars['title'],
        'action_links' => render($vars['action_links']),
        'title_prefix' => render($vars['title_prefix']),
        'title_suffix' => render($vars['title_suffix']),
        'help' => render($vars['page']['help']),
      );
      $vars['top'] = theme('dlts_viewer_top', $top_options);
    }
  }
}

/**
 * Implements hook_stream_wrappers().
 *
 * hook_stream_wrappers() is Drupal's way of exposing the class that PHP will
 * use to provide a new stream wrapper class. In this case, we'll expose the
 * 'fileserver' scheme, e.g., "fileserver://example/example.txt"
 *
 * @see FileFilesServerStreamWrapper
 */
function dlts_viewer_stream_wrappers() {
  $wrappers = array(
    'fileserver' => array(
      'name' => t('Fileserver StreamWrapper'),
      'class' => 'FileFilesServerStreamWrapper',
      'description' => t('Access file from the FileServer.'),
      'type' => STREAM_WRAPPERS_WRITE_VISIBLE,
    ),
  ) ;
  return $wrappers;
}

function dlts_viewer_metadata_display($node) {
	return node_view($node, 'metadata', $node->language);
}

/**
 * Implements hook_flush_caches().
 *
 * Using this as a way to get certain phrases into the t() workflow, that don't
 * seem to otherwise make it. To get these items to show up in the Translate
 * interface, go to a different language and in the Drupal admin clear the
 * Drupal cache. (ie, at /admin/config/development/performance
 */
function dlts_viewer_flush_caches() {
	// Translatables
	// Included for use with string extractors like potx.
	t('Author');
	t('Place of publication');
	t('Publisher');
	t('Date of Publication');
	t('Subject');
	t('Collection');
	t('Language');
	t('Provider');
	t('Permanent link');
	t('PDF');
	t('High-resolution');
	t('Low-resolution');
  t('Vol.');
  t('Download');
  t('High resolution PDF');
  t('Low resolution PDF ');
}

// here we need to make sure we delete the record from Apache Solr
function dlts_viewer_node_delete($node) {
  $records = db_query("SELECT document from {dlts_viewer_books_json} WHERE nid = :nid", array(":nid" => $node->nid));
  foreach ($records as $record) {
    if (file_exists($record->document)) {
      file_unmanaged_delete($record->document);
    }
  }
  db_delete('dlts_viewer_books_json')->condition('nid', $node->nid)->execute();
}

<?php

/**
 * @file
 * Defines simple text field types.
 */

/**
 * Implements hook_help().
 */
function field_fileserver_help($path, $arg) {
  switch($path) {
    case 'admin/help#text':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>some day someone will write soemthing that will make sense ... but not me!!!</p>';
      return $output;
  }
}

/**
 * Implements hook_field_info().
 *
 * Field settings:
 *   - max_length: the maximum length for a varchar field.
 * Instance settings:
 *   - text_processing: whether text input filters should be used.
 *   - display_summary: whether the summary field should be displayed.
 *     When empty and not displayed the summary will take its value from the
 *     trimmed value of the main text field.
 */
function field_fileserver_field_info() {
  return array(
    'fileserver_image' => array(
      'label' => t('Image'),
      'description' => t('This field stores the image URL of a image hsoted in the FileServer'),
      'instance_settings' => array('text_processing' => 0),
      'default_widget' => 'fileserver_image_textfield',
      'default_formatter' => 'fileserver_image_default',
    ),
 );
}

/**
 * Implements hook_field_validate().
 */
function field_fileserver_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  // here we can make sure the value is a valid URL
}

/**
 * Implements hook_field_load().
 *
 * Where possible, generate the sanitized version of each field early so that
 * it is cached in the field cache. This avoids looking up from the filter cache
 * separately.
 *
 * @see text_field_formatter_view()
 */
function field_fileserver_field_load($entity_type, $entities, $field, $instances, $langcode, &$items) {
  foreach ($entities as $id => $entity) {
    foreach ($items[$id] as $delta => $item) {
      // Only process items with a cacheable format, the rest will be handled
      // by formatters if needed.
      
      /**
      if (empty($instances[$id]['settings']['text_processing']) || filter_format_allowcache($item['format'])) {
        $items[$id][$delta]['safe_value'] = isset($item['value']) ? _text_sanitize($instances[$id], $langcode, $item, 'value') : '';
        if ($field['type'] == 'text_with_summary') {
          $items[$id][$delta]['safe_summary'] = isset($item['summary']) ? _text_sanitize($instances[$id], $langcode, $item, 'summary') : '';
        }
      }
      */
      
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function field_fileserver_field_is_empty($item, $field) {
  if (isset($item['value'] ) && ! empty($item['value'] )) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Implements hook_field_formatter_info().
 */
function field_fileserver_field_formatter_info() {
  return array(
    'fileserver_image_default' => array(
      'label' => t('Default'),
      'field types' => array('fileserver_image'),
    ),
 );
}

/**
 * Implements hook_field_formatter_view().
 */
function field_fileserver_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $element = array();

  switch($display['type']) {
    case 'text_default':
      foreach ($items as $delta => $item) {
        //$output = _text_sanitize($instance, $langcode, $item, 'value');
        $output = 'hola';
        $element[$delta] = array('#markup' => $output);
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function field_fileserver_field_widget_info() {
  return array(
    'fileserver_image_textfield' => array(
      'label' => t('Text field'),
      'field types' => array('fileserver_image'),
      'settings' => array('size' => 60),
    ),
 );
}

/**
 * Implements hook_field_widget_form().
 */
function field_fileserver_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $main_widget = array();

  $main_widget = $element + array(
    '#type' => 'textfield',
    '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : NULL,
    '#size' => 60,
    '#maxlength' => $field['settings']['max_length'],
    '#attributes' => array('class' => array('text-full')),
 );
  
  $element['value'] = $main_widget;
      
  return $element;
}

/**
 * Implements hook_field_widget_error().
 */
function field_fileserver_field_widget_error($element, $error, $form, &$form_state) {

  $error_element = $element[$element['#columns'][0]];

  form_error($error_element, $error['message']);
}

/**
 * Implements hook_filter_format_update().
 */
function field_fileserver_filter_format_update($format) {
  field_cache_clear();
}

/**
 * Implements hook_filter_format_disable().
 */
function field_fileserver_filter_format_disable($format) {
  field_cache_clear();
}
